{
  "all_compiler_flags_desc": {
    "##arch-arm-mfpu-neon": {
      "can_omit": "yes",
      "choice": [
        "-mfpu=neon",
        ""
      ],
      "default": "",
      "desc": "compiler flag (ARM specific): -mfpu=neon",
      "sort": 30990,
      "tags": [
        "basic",
        "optimization",
        "arm-neon"
      ],
      "type": "text"
    },
    "##arch-mtune-native": {
      "can_omit": "yes",
      "choice": [
        "-mtune=native",
        ""
      ],
      "default": "",
      "desc": "compiler flag (CPU specific): -mtune=native",
      "sort": 30991,
      "tags": [
        "basic",
        "optimization",
        "cpu-specific"
      ],
      "type": "text"
    },
    "##base_opt": {
      "choice": [
        "-O3",
        "-O0",
        "-O1",
        "-O2",
        "-Os}"
      ],
      "default": "",
      "desc": "base compiler flag",
      "sort": 10000,
      "tags": [
        "base",
        "basic",
        "optimization"
      ],
      "type": "text"
    },
    "##bool--fira-algorithm=": {
      "can_omit": "yes",
      "choice": [
        "-fira-algorithm=CB",
        "-fira-algorithm=priority"
      ],
      "default": "",
      "desc": "compiler flag: -fira-algorithm=",
      "sort": 30080,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool--fira-region=": {
      "can_omit": "yes",
      "choice": [
        "-fira-region=all",
        "-fira-region=mixed",
        "-fira-region=one"
      ],
      "default": "",
      "desc": "compiler flag: -fira-region=",
      "sort": 30090,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-associative-math": {
      "can_omit": "yes",
      "choice": [
        "-fassociative-math",
        "-fno-associative-math"
      ],
      "default": "",
      "desc": "compiler flag: -fassociative-math",
      "sort": 10010,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-auto-inc-dec": {
      "can_omit": "yes",
      "choice": [
        "-fauto-inc-dec",
        "-fno-auto-inc-dec"
      ],
      "default": "",
      "desc": "compiler flag: -fauto-inc-dec",
      "sort": 10020,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-branch-count-reg": {
      "can_omit": "yes",
      "choice": [
        "-fbranch-count-reg",
        "-fno-branch-count-reg"
      ],
      "default": "",
      "desc": "compiler flag: -fno-branch-count-reg",
      "sort": 10660,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-branch-probabilities": {
      "can_omit": "yes",
      "choice": [
        "-fbranch-probabilities",
        "-fno-branch-probabilities"
      ],
      "default": "",
      "desc": "compiler flag: -fbranch-probabilities",
      "sort": 10030,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-branch-target-load-optimize": {
      "can_omit": "yes",
      "choice": [
        "-fbranch-target-load-optimize",
        "-fno-branch-target-load-optimize"
      ],
      "default": "",
      "desc": "compiler flag: -fbranch-target-load-optimize",
      "sort": 10040,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-branch-target-load-optimize2": {
      "can_omit": "yes",
      "choice": [
        "-fbranch-target-load-optimize2",
        "-fno-branch-target-load-optimize2"
      ],
      "default": "",
      "desc": "compiler flag: -fbranch-target-load-optimize2",
      "sort": 10050,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-btr-bb-exclusive": {
      "can_omit": "yes",
      "choice": [
        "-fbtr-bb-exclusive",
        "-fno-btr-bb-exclusive"
      ],
      "default": "",
      "desc": "compiler flag: -fbtr-bb-exclusive",
      "sort": 10060,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-caller-saves": {
      "can_omit": "yes",
      "choice": [
        "-fcaller-saves",
        "-fno-caller-saves"
      ],
      "default": "",
      "desc": "compiler flag: -fcaller-saves",
      "sort": 10070,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-check-data-deps": {
      "can_omit": "yes",
      "choice": [
        "-fcheck-data-deps",
        "-fno-check-data-deps"
      ],
      "default": "",
      "desc": "compiler flag: -fcheck-data-deps",
      "sort": 10080,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-conserve-stack": {
      "can_omit": "yes",
      "choice": [
        "-fconserve-stack",
        "-fno-conserve-stack"
      ],
      "default": "",
      "desc": "compiler flag: -fconserve-stack",
      "sort": 10090,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-cprop-registers": {
      "can_omit": "yes",
      "choice": [
        "-fcprop-registers",
        "-fno-cprop-registers"
      ],
      "default": "",
      "desc": "compiler flag: -fcprop-registers",
      "sort": 10100,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-crossjumping": {
      "can_omit": "yes",
      "choice": [
        "-fcrossjumping",
        "-fno-crossjumping"
      ],
      "default": "",
      "desc": "compiler flag: -fcrossjumping",
      "sort": 10110,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-cse-follow-jumps": {
      "can_omit": "yes",
      "choice": [
        "-fcse-follow-jumps",
        "-fno-cse-follow-jumps"
      ],
      "default": "",
      "desc": "compiler flag: -fcse-follow-jumps",
      "sort": 10120,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-cse-skip-blocks": {
      "can_omit": "yes",
      "choice": [
        "-fcse-skip-blocks",
        "-fno-cse-skip-blocks"
      ],
      "default": "",
      "desc": "compiler flag: -fcse-skip-blocks",
      "sort": 10130,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-cx-fortran-rules": {
      "can_omit": "yes",
      "choice": [
        "-fcx-fortran-rules",
        "-fno-cx-fortran-rules"
      ],
      "default": "",
      "desc": "compiler flag: -fcx-fortran-rules",
      "sort": 10140,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-cx-limited-range": {
      "can_omit": "yes",
      "choice": [
        "-fcx-limited-range",
        "-fno-cx-limited-range"
      ],
      "default": "",
      "desc": "compiler flag: -fcx-limited-range",
      "sort": 10150,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-data-sections": {
      "can_omit": "yes",
      "choice": [
        "-fdata-sections",
        "-fno-data-sections"
      ],
      "default": "",
      "desc": "compiler flag: -fdata-sections",
      "sort": 10160,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-dce": {
      "can_omit": "yes",
      "choice": [
        "-fdce",
        "-fno-dce"
      ],
      "default": "",
      "desc": "compiler flag: -fdce",
      "sort": 10180,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-default-inline": {
      "can_omit": "yes",
      "choice": [
        "-fdefault-inline",
        "-fno-default-inline"
      ],
      "default": "",
      "desc": "compiler flag: -fno-default-inline",
      "sort": 10670,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-defer-pop": {
      "can_omit": "yes",
      "choice": [
        "-fdefer-pop",
        "-fno-defer-pop"
      ],
      "default": "",
      "desc": "compiler flag: -fno-defer-pop",
      "sort": 10680,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-delayed-branch": {
      "can_omit": "yes",
      "choice": [
        "-fdelayed-branch",
        "-fno-delayed-branch"
      ],
      "default": "",
      "desc": "compiler flag: -fdelayed-branch",
      "sort": 10190,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-delete-null-pointer-checks": {
      "can_omit": "yes",
      "choice": [
        "-fdelete-null-pointer-checks",
        "-fno-delete-null-pointer-checks"
      ],
      "default": "",
      "desc": "compiler flag: -fdelete-null-pointer-checks",
      "sort": 10200,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-dse": {
      "can_omit": "yes",
      "choice": [
        "-fdse",
        "-fno-dse"
      ],
      "default": "",
      "desc": "compiler flag: -fdse",
      "sort": 10220,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-early-inlining": {
      "can_omit": "yes",
      "choice": [
        "-fearly-inlining",
        "-fno-early-inlining"
      ],
      "default": "",
      "desc": "compiler flag: -fearly-inlining",
      "sort": 10230,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-expensive-optimizations": {
      "can_omit": "yes",
      "choice": [
        "-fexpensive-optimizations",
        "-fno-expensive-optimizations"
      ],
      "default": "",
      "desc": "compiler flag: -fexpensive-optimizations",
      "sort": 10240,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-fast-math": {
      "can_omit": "yes",
      "choice": [
        "-ffast-math",
        "-fno-fast-math"
      ],
      "default": "",
      "desc": "compiler flag: -ffast-math",
      "sort": 10250,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-finite-math-only": {
      "can_omit": "yes",
      "choice": [
        "-ffinite-math-only",
        "-fno-finite-math-only"
      ],
      "default": "",
      "desc": "compiler flag: -ffinite-math-only",
      "sort": 10260,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-float-store": {
      "can_omit": "yes",
      "choice": [
        "-ffloat-store",
        "-fno-float-store"
      ],
      "default": "",
      "desc": "compiler flag: -ffloat-store",
      "sort": 10270,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-forward-propagate": {
      "can_omit": "yes",
      "choice": [
        "-fforward-propagate",
        "-fno-forward-propagate"
      ],
      "default": "",
      "desc": "compiler flag: -fforward-propagate",
      "sort": 10280,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-function-cse": {
      "can_omit": "yes",
      "choice": [
        "-ffunction-cse",
        "-fno-function-cse"
      ],
      "default": "",
      "desc": "compiler flag: -fno-function-cse",
      "sort": 10690,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-function-sections": {
      "can_omit": "yes",
      "choice": [
        "-ffunction-sections",
        "-fno-function-sections"
      ],
      "default": "",
      "desc": "compiler flag: -ffunction-sections",
      "sort": 10290,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-gcse": {
      "can_omit": "yes",
      "choice": [
        "-fgcse",
        "-fno-gcse"
      ],
      "default": "",
      "desc": "compiler flag: -fgcse",
      "sort": 10300,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-gcse-after-reload": {
      "can_omit": "yes",
      "choice": [
        "-fgcse-after-reload",
        "-fno-gcse-after-reload"
      ],
      "default": "",
      "desc": "compiler flag: -fgcse-after-reload",
      "sort": 10310,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-gcse-las": {
      "can_omit": "yes",
      "choice": [
        "-fgcse-las",
        "-fno-gcse-las"
      ],
      "default": "",
      "desc": "compiler flag: -fgcse-las",
      "sort": 10320,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-gcse-lm": {
      "can_omit": "yes",
      "choice": [
        "-fgcse-lm",
        "-fno-gcse-lm"
      ],
      "default": "",
      "desc": "compiler flag: -fgcse-lm",
      "sort": 10330,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-gcse-sm": {
      "can_omit": "yes",
      "choice": [
        "-fgcse-sm",
        "-fno-gcse-sm"
      ],
      "default": "",
      "desc": "compiler flag: -fgcse-sm",
      "sort": 10340,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-guess-branch-probability": {
      "can_omit": "yes",
      "choice": [
        "-fguess-branch-probability",
        "-fno-guess-branch-probability"
      ],
      "default": "",
      "desc": "compiler flag: -fno-guess-branch-probability",
      "sort": 10700,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-if-conversion": {
      "can_omit": "yes",
      "choice": [
        "-fif-conversion",
        "-fno-if-conversion"
      ],
      "default": "",
      "desc": "compiler flag: -fif-conversion",
      "sort": 10350,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-if-conversion2": {
      "can_omit": "yes",
      "choice": [
        "-fif-conversion2",
        "-fno-if-conversion2"
      ],
      "default": "",
      "desc": "compiler flag: -fif-conversion2",
      "sort": 10360,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-indirect-inlining": {
      "can_omit": "yes",
      "choice": [
        "-findirect-inlining",
        "-fno-indirect-inlining"
      ],
      "default": "",
      "desc": "compiler flag: -findirect-inlining",
      "sort": 10370,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-inline": {
      "can_omit": "yes",
      "choice": [
        "-finline",
        "-fno-inline"
      ],
      "default": "",
      "desc": "compiler flag: -fno-inline",
      "sort": 10710,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-inline-functions": {
      "can_omit": "yes",
      "choice": [
        "-finline-functions",
        "-fno-inline-functions"
      ],
      "default": "",
      "desc": "compiler flag: -finline-functions",
      "sort": 10380,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-inline-functions-called-once": {
      "can_omit": "yes",
      "choice": [
        "-finline-functions-called-once",
        "-fno-inline-functions-called-once"
      ],
      "default": "",
      "desc": "compiler flag: -finline-functions-called-once",
      "sort": 10390,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-inline-small-functions": {
      "can_omit": "yes",
      "choice": [
        "-finline-small-functions",
        "-fno-inline-small-functions"
      ],
      "default": "",
      "desc": "compiler flag: -finline-small-functions",
      "sort": 10400,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-ipa-cp": {
      "can_omit": "yes",
      "choice": [
        "-fipa-cp",
        "-fno-ipa-cp"
      ],
      "default": "",
      "desc": "compiler flag: -fipa-cp",
      "sort": 10410,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-ipa-cp-clone": {
      "can_omit": "yes",
      "choice": [
        "-fipa-cp-clone",
        "-fno-ipa-cp-clone"
      ],
      "default": "",
      "desc": "compiler flag: -fipa-cp-clone",
      "sort": 10420,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-ipa-matrix-reorg": {
      "can_omit": "yes",
      "choice": [
        "-fipa-matrix-reorg",
        "-fno-ipa-matrix-reorg"
      ],
      "default": "",
      "desc": "compiler flag: -fipa-matrix-reorg",
      "sort": 10430,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-ipa-pta": {
      "can_omit": "yes",
      "choice": [
        "-fipa-pta",
        "-fno-ipa-pta"
      ],
      "default": "",
      "desc": "compiler flag: -fipa-pta",
      "sort": 10440,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-ipa-pure-const": {
      "can_omit": "yes",
      "choice": [
        "-fipa-pure-const",
        "-fno-ipa-pure-const"
      ],
      "default": "",
      "desc": "compiler flag: -fipa-pure-const",
      "sort": 10450,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-ipa-reference": {
      "can_omit": "yes",
      "choice": [
        "-fipa-reference",
        "-fno-ipa-reference"
      ],
      "default": "",
      "desc": "compiler flag: -fipa-reference",
      "sort": 10460,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-ipa-struct-reorg": {
      "can_omit": "yes",
      "choice": [
        "-fipa-struct-reorg",
        "-fno-ipa-struct-reorg"
      ],
      "default": "",
      "desc": "compiler flag: -fipa-struct-reorg",
      "sort": 10470,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-ipa-type-escape": {
      "can_omit": "yes",
      "choice": [
        "-fipa-type-escape",
        "-fno-ipa-type-escape"
      ],
      "default": "",
      "desc": "compiler flag: -fipa-type-escape",
      "sort": 10480,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-ira-coalesce": {
      "can_omit": "yes",
      "choice": [
        "-fira-coalesce",
        "-fno-ira-coalesce"
      ],
      "default": "",
      "desc": "compiler flag: -fira-coalesce",
      "sort": 10490,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-ira-share-save-slots": {
      "can_omit": "yes",
      "choice": [
        "-fira-share-save-slots",
        "-fno-ira-share-save-slots"
      ],
      "default": "",
      "desc": "compiler flag: -fno-ira-share-save-slots",
      "sort": 10500,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-ira-share-spill-slots": {
      "can_omit": "yes",
      "choice": [
        "-fira-share-spill-slots",
        "-fno-ira-share-spill-slots"
      ],
      "default": "",
      "desc": "compiler flag: -fno-ira-share-spill-slots",
      "sort": 10510,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-ivopts": {
      "can_omit": "yes",
      "choice": [
        "-fivopts",
        "-fno-ivopts"
      ],
      "default": "",
      "desc": "compiler flag: -fivopts",
      "sort": 10520,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-keep-inline-functions": {
      "can_omit": "yes",
      "choice": [
        "-fkeep-inline-functions",
        "-fno-keep-inline-functions"
      ],
      "default": "",
      "desc": "compiler flag: -fkeep-inline-functions",
      "sort": 10530,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-keep-static-consts": {
      "can_omit": "yes",
      "choice": [
        "-fkeep-static-consts",
        "-fno-keep-static-consts"
      ],
      "default": "",
      "desc": "compiler flag: -fkeep-static-consts",
      "sort": 10540,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-loop-block": {
      "can_omit": "yes",
      "choice": [
        "-floop-block",
        "-fno-loop-block"
      ],
      "default": "",
      "desc": "compiler flag: -floop-block",
      "sort": 10550,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-loop-interchange": {
      "can_omit": "yes",
      "choice": [
        "-floop-interchange",
        "-fno-loop-interchange"
      ],
      "default": "",
      "desc": "compiler flag: -floop-interchange",
      "sort": 10560,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-loop-strip-mine": {
      "can_omit": "yes",
      "choice": [
        "-floop-strip-mine",
        "-fno-loop-strip-mine"
      ],
      "default": "",
      "desc": "compiler flag: -floop-strip-mine",
      "sort": 10570,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-math-errno": {
      "can_omit": "yes",
      "choice": [
        "-fmath-errno",
        "-fno-math-errno"
      ],
      "default": "",
      "desc": "compiler flag: -fno-math-errno",
      "sort": 10720,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-merge-all-constants": {
      "can_omit": "yes",
      "choice": [
        "-fmerge-all-constants",
        "-fno-merge-all-constants"
      ],
      "default": "",
      "desc": "compiler flag: -fmerge-all-constants",
      "sort": 10580,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-merge-constants": {
      "can_omit": "yes",
      "choice": [
        "-fmerge-constants",
        "-fno-merge-constants"
      ],
      "default": "",
      "desc": "compiler flag: -fmerge-constants",
      "sort": 10590,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-modulo-sched": {
      "can_omit": "yes",
      "choice": [
        "-fmodulo-sched",
        "-fno-modulo-sched"
      ],
      "default": "",
      "desc": "compiler flag: -fmodulo-sched",
      "sort": 10600,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-modulo-sched-allow-regmoves": {
      "can_omit": "yes",
      "choice": [
        "-fmodulo-sched-allow-regmoves",
        "-fno-modulo-sched-allow-regmoves"
      ],
      "default": "",
      "desc": "compiler flag: -fmodulo-sched-allow-regmoves",
      "sort": 10610,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-move-loop-invariants": {
      "can_omit": "yes",
      "choice": [
        "-fmove-loop-invariants",
        "-fno-move-loop-invariants"
      ],
      "default": "",
      "desc": "compiler flag: -fmove-loop-invariants",
      "sort": 10620,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-mudflap": {
      "can_omit": "yes",
      "choice": [
        "-fmudflap",
        "-fno-mudflap"
      ],
      "default": "",
      "desc": "compiler flag: -fmudflap",
      "sort": 10630,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-mudflapir": {
      "can_omit": "yes",
      "choice": [
        "-fmudflapir",
        "-fno-mudflapir"
      ],
      "default": "",
      "desc": "compiler flag: -fmudflapir",
      "sort": 10640,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-omit-frame-pointer": {
      "can_omit": "yes",
      "choice": [
        "-fomit-frame-pointer",
        "-fno-omit-frame-pointer"
      ],
      "default": "",
      "desc": "compiler flag: -fomit-frame-pointer",
      "sort": 10810,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-optimize-register-move": {
      "can_omit": "yes",
      "choice": [
        "-foptimize-register-move",
        "-fno-optimize-register-move"
      ],
      "default": "",
      "desc": "compiler flag: -foptimize-register-move",
      "sort": 10820,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-optimize-sibling-calls": {
      "can_omit": "yes",
      "choice": [
        "-foptimize-sibling-calls",
        "-fno-optimize-sibling-calls"
      ],
      "default": "",
      "desc": "compiler flag: -foptimize-sibling-calls",
      "sort": 10830,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-peel-loops": {
      "can_omit": "yes",
      "choice": [
        "-fpeel-loops",
        "-fno-peel-loops"
      ],
      "default": "",
      "desc": "compiler flag: -fpeel-loops",
      "sort": 10840,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-peephole": {
      "can_omit": "yes",
      "choice": [
        "-fpeephole",
        "-fno-peephole"
      ],
      "default": "",
      "desc": "compiler flag: -fno-peephole",
      "sort": 10730,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-peephole2": {
      "can_omit": "yes",
      "choice": [
        "-fpeephole2",
        "-fno-peephole2"
      ],
      "default": "",
      "desc": "compiler flag: -fno-peephole2",
      "sort": 10740,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-predictive-commoning": {
      "can_omit": "yes",
      "choice": [
        "-fpredictive-commoning",
        "-fno-predictive-commoning"
      ],
      "default": "",
      "desc": "compiler flag: -fpredictive-commoning",
      "sort": 10850,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-prefetch-loop-arrays": {
      "can_omit": "yes",
      "choice": [
        "-fprefetch-loop-arrays",
        "-fno-prefetch-loop-arrays"
      ],
      "default": "",
      "desc": "compiler flag: -fprefetch-loop-arrays",
      "sort": 10860,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-reciprocal-math": {
      "can_omit": "yes",
      "choice": [
        "-freciprocal-math",
        "-fno-reciprocal-math"
      ],
      "default": "",
      "desc": "compiler flag: -freciprocal-math",
      "sort": 10870,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-regmove": {
      "can_omit": "yes",
      "choice": [
        "-fregmove",
        "-fno-regmove"
      ],
      "default": "",
      "desc": "compiler flag: -fregmove",
      "sort": 10880,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-rename-registers": {
      "can_omit": "yes",
      "choice": [
        "-frename-registers",
        "-fno-rename-registers"
      ],
      "default": "",
      "desc": "compiler flag: -frename-registers",
      "sort": 10890,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-reorder-blocks": {
      "can_omit": "yes",
      "choice": [
        "-freorder-blocks",
        "-fno-reorder-blocks"
      ],
      "default": "",
      "desc": "compiler flag: -freorder-blocks",
      "sort": 10900,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-reorder-blocks-and-partition": {
      "can_omit": "yes",
      "choice": [
        "-freorder-blocks-and-partition",
        "-fno-reorder-blocks-and-partition"
      ],
      "default": "",
      "desc": "compiler flag: -freorder-blocks-and-partition",
      "sort": 10910,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-reorder-functions": {
      "can_omit": "yes",
      "choice": [
        "-freorder-functions",
        "-fno-reorder-functions"
      ],
      "default": "",
      "desc": "compiler flag: -freorder-functions",
      "sort": 10920,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-rerun-cse-after-loop": {
      "can_omit": "yes",
      "choice": [
        "-frerun-cse-after-loop",
        "-fno-rerun-cse-after-loop"
      ],
      "default": "",
      "desc": "compiler flag: -frerun-cse-after-loop",
      "sort": 10930,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-reschedule-modulo-scheduled-loops": {
      "can_omit": "yes",
      "choice": [
        "-freschedule-modulo-scheduled-loops",
        "-fno-reschedule-modulo-scheduled-loops"
      ],
      "default": "",
      "desc": "compiler flag: -freschedule-modulo-scheduled-loops",
      "sort": 10940,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-rounding-math": {
      "can_omit": "yes",
      "choice": [
        "-frounding-math",
        "-fno-rounding-math"
      ],
      "default": "",
      "desc": "compiler flag: -frounding-math",
      "sort": 10950,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-rtl-abstract-sequences": {
      "can_omit": "yes",
      "choice": [
        "-frtl-abstract-sequences",
        "-fno-rtl-abstract-sequences"
      ],
      "default": "",
      "desc": "compiler flag: -frtl-abstract-sequences",
      "sort": 10960,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-sched-interblock": {
      "can_omit": "yes",
      "choice": [
        "-fsched-interblock",
        "-fno-sched-interblock"
      ],
      "default": "",
      "desc": "compiler flag: -fno-sched-interblock",
      "sort": 10750,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-sched-spec": {
      "can_omit": "yes",
      "choice": [
        "-fsched-spec",
        "-fno-sched-spec"
      ],
      "default": "",
      "desc": "compiler flag: -fno-sched-spec",
      "sort": 10760,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-sched-spec-load": {
      "can_omit": "yes",
      "choice": [
        "-fsched-spec-load",
        "-fno-sched-spec-load"
      ],
      "default": "",
      "desc": "compiler flag: -fsched-spec-load",
      "sort": 10990,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-sched-spec-load-dangerous": {
      "can_omit": "yes",
      "choice": [
        "-fsched-spec-load-dangerous",
        "-fno-sched-spec-load-dangerous"
      ],
      "default": "",
      "desc": "compiler flag: -fsched-spec-load-dangerous",
      "sort": 11000,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-sched2-use-superblocks": {
      "can_omit": "yes",
      "choice": [
        "-fsched2-use-superblocks",
        "-fno-sched2-use-superblocks"
      ],
      "default": "",
      "desc": "compiler flag: -fsched2-use-superblocks",
      "sort": 10970,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-sched2-use-traces": {
      "can_omit": "yes",
      "choice": [
        "-fsched2-use-traces",
        "-fno-sched2-use-traces"
      ],
      "default": "",
      "desc": "compiler flag: -fsched2-use-traces",
      "sort": 10980,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-schedule-insns": {
      "can_omit": "yes",
      "choice": [
        "-fschedule-insns",
        "-fno-schedule-insns"
      ],
      "default": "",
      "desc": "compiler flag: -fschedule-insns",
      "sort": 11010,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-schedule-insns2": {
      "can_omit": "yes",
      "choice": [
        "-fschedule-insns2",
        "-fno-schedule-insns2"
      ],
      "default": "",
      "desc": "compiler flag: -fschedule-insns2",
      "sort": 11020,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-section-anchors": {
      "can_omit": "yes",
      "choice": [
        "-fsection-anchors",
        "-fno-section-anchors"
      ],
      "default": "",
      "desc": "compiler flag: -fsection-anchors",
      "sort": 11030,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-see": {
      "can_omit": "yes",
      "choice": [
        "-fsee",
        "-fno-see"
      ],
      "default": "",
      "desc": "compiler flag: -fsee",
      "sort": 11040,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-sel-sched-pipelining": {
      "can_omit": "yes",
      "choice": [
        "-fsel-sched-pipelining",
        "-fno-sel-sched-pipelining"
      ],
      "default": "",
      "desc": "compiler flag: -fsel-sched-pipelining",
      "sort": 11070,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-sel-sched-pipelining-outer-loops": {
      "can_omit": "yes",
      "choice": [
        "-fsel-sched-pipelining-outer-loops",
        "-fno-sel-sched-pipelining-outer-loops"
      ],
      "default": "",
      "desc": "compiler flag: -fsel-sched-pipelining-outer-loops",
      "sort": 11080,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-selective-scheduling": {
      "can_omit": "yes",
      "choice": [
        "-fselective-scheduling",
        "-fno-selective-scheduling"
      ],
      "default": "",
      "desc": "compiler flag: -fselective-scheduling",
      "sort": 11050,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-selective-scheduling2": {
      "can_omit": "yes",
      "choice": [
        "-fselective-scheduling2",
        "-fno-selective-scheduling2"
      ],
      "default": "",
      "desc": "compiler flag: -fselective-scheduling2",
      "sort": 11060,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-signaling-nans": {
      "can_omit": "yes",
      "choice": [
        "-fsignaling-nans",
        "-fno-signaling-nans"
      ],
      "default": "",
      "desc": "compiler flag: -fsignaling-nans",
      "sort": 11090,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-signed-zeros": {
      "can_omit": "yes",
      "choice": [
        "-fsigned-zeros",
        "-fno-signed-zeros"
      ],
      "default": "",
      "desc": "compiler flag: -fno-signed-zeros",
      "sort": 10770,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-single-precision-constant": {
      "can_omit": "yes",
      "choice": [
        "-fsingle-precision-constant",
        "-fno-single-precision-constant"
      ],
      "default": "",
      "desc": "compiler flag: -fsingle-precision-constant",
      "sort": 11100,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-split-ivs-in-unroller": {
      "can_omit": "yes",
      "choice": [
        "-fsplit-ivs-in-unroller",
        "-fno-split-ivs-in-unroller"
      ],
      "default": "",
      "desc": "compiler flag: -fsplit-ivs-in-unroller",
      "sort": 11110,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-split-wide-types": {
      "can_omit": "yes",
      "choice": [
        "-fsplit-wide-types",
        "-fno-split-wide-types"
      ],
      "default": "",
      "desc": "compiler flag: -fsplit-wide-types",
      "sort": 11120,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-strict-aliasing": {
      "can_omit": "yes",
      "choice": [
        "-fstrict-aliasing",
        "-fno-strict-aliasing"
      ],
      "default": "",
      "desc": "compiler flag: -fstrict-aliasing",
      "sort": 11150,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-strict-overflow": {
      "can_omit": "yes",
      "choice": [
        "-fstrict-overflow",
        "-fno-strict-overflow"
      ],
      "default": "",
      "desc": "compiler flag: -fstrict-overflow",
      "sort": 11160,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-thread-jumps": {
      "can_omit": "yes",
      "choice": [
        "-fthread-jumps",
        "-fno-thread-jumps"
      ],
      "default": "",
      "desc": "compiler flag: -fthread-jumps",
      "sort": 11170,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-toplevel-reorder": {
      "can_omit": "yes",
      "choice": [
        "-ftoplevel-reorder",
        "-fno-toplevel-reorder"
      ],
      "default": "",
      "desc": "compiler flag: -fno-toplevel-reorder",
      "sort": 10780,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-tracer": {
      "can_omit": "yes",
      "choice": [
        "-ftracer",
        "-fno-tracer"
      ],
      "default": "",
      "desc": "compiler flag: -ftracer",
      "sort": 11180,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-trapping-math": {
      "can_omit": "yes",
      "choice": [
        "-ftrapping-math",
        "-fno-trapping-math"
      ],
      "default": "",
      "desc": "compiler flag: -fno-trapping-math",
      "sort": 10790,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-tree-builtin-call-dce": {
      "can_omit": "yes",
      "choice": [
        "-ftree-builtin-call-dce",
        "-fno-tree-builtin-call-dce"
      ],
      "default": "",
      "desc": "compiler flag: -ftree-builtin-call-dce",
      "sort": 11190,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-tree-ccp": {
      "can_omit": "yes",
      "choice": [
        "-ftree-ccp",
        "-fno-tree-ccp"
      ],
      "default": "",
      "desc": "compiler flag: -ftree-ccp",
      "sort": 11200,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-tree-ch": {
      "can_omit": "yes",
      "choice": [
        "-ftree-ch",
        "-fno-tree-ch"
      ],
      "default": "",
      "desc": "compiler flag: -ftree-ch",
      "sort": 11210,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-tree-copy-prop": {
      "can_omit": "yes",
      "choice": [
        "-ftree-copy-prop",
        "-fno-tree-copy-prop"
      ],
      "default": "",
      "desc": "compiler flag: -ftree-copy-prop",
      "sort": 11220,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-tree-copyrename": {
      "can_omit": "yes",
      "choice": [
        "-ftree-copyrename",
        "-fno-tree-copyrename"
      ],
      "default": "",
      "desc": "compiler flag: -ftree-copyrename",
      "sort": 11230,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-tree-dce": {
      "can_omit": "yes",
      "choice": [
        "-ftree-dce",
        "-fno-tree-dce"
      ],
      "default": "",
      "desc": "compiler flag: -ftree-dce",
      "sort": 11240,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-tree-dominator-opts": {
      "can_omit": "yes",
      "choice": [
        "-ftree-dominator-opts",
        "-fno-tree-dominator-opts"
      ],
      "default": "",
      "desc": "compiler flag: -ftree-dominator-opts",
      "sort": 11250,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-tree-dse": {
      "can_omit": "yes",
      "choice": [
        "-ftree-dse",
        "-fno-tree-dse"
      ],
      "default": "",
      "desc": "compiler flag: -ftree-dse",
      "sort": 11260,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-tree-fre": {
      "can_omit": "yes",
      "choice": [
        "-ftree-fre",
        "-fno-tree-fre"
      ],
      "default": "",
      "desc": "compiler flag: -ftree-fre",
      "sort": 11270,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-tree-loop-distribution": {
      "can_omit": "yes",
      "choice": [
        "-ftree-loop-distribution",
        "-fno-tree-loop-distribution"
      ],
      "default": "",
      "desc": "compiler flag: -ftree-loop-distribution",
      "sort": 11290,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-tree-loop-im": {
      "can_omit": "yes",
      "choice": [
        "-ftree-loop-im",
        "-fno-tree-loop-im"
      ],
      "default": "",
      "desc": "compiler flag: -ftree-loop-im",
      "sort": 11280,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-tree-loop-ivcanon": {
      "can_omit": "yes",
      "choice": [
        "-ftree-loop-ivcanon",
        "-fno-tree-loop-ivcanon"
      ],
      "default": "",
      "desc": "compiler flag: -ftree-loop-ivcanon",
      "sort": 11300,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-tree-loop-linear": {
      "can_omit": "yes",
      "choice": [
        "-ftree-loop-linear",
        "-fno-tree-loop-linear"
      ],
      "default": "",
      "desc": "compiler flag: -ftree-loop-linear",
      "sort": 11310,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-tree-loop-optimize": {
      "can_omit": "yes",
      "choice": [
        "-ftree-loop-optimize",
        "-fno-tree-loop-optimize"
      ],
      "default": "",
      "desc": "compiler flag: -ftree-loop-optimize",
      "sort": 11320,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-tree-pre": {
      "can_omit": "yes",
      "choice": [
        "-ftree-pre",
        "-fno-tree-pre"
      ],
      "default": "",
      "desc": "compiler flag: -ftree-pre",
      "sort": 11330,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-tree-reassoc": {
      "can_omit": "yes",
      "choice": [
        "-ftree-reassoc",
        "-fno-tree-reassoc"
      ],
      "default": "",
      "desc": "compiler flag: -ftree-reassoc",
      "sort": 11340,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-tree-sink": {
      "can_omit": "yes",
      "choice": [
        "-ftree-sink",
        "-fno-tree-sink"
      ],
      "default": "",
      "desc": "compiler flag: -ftree-sink",
      "sort": 11350,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-tree-sra": {
      "can_omit": "yes",
      "choice": [
        "-ftree-sra",
        "-fno-tree-sra"
      ],
      "default": "",
      "desc": "compiler flag: -ftree-sra",
      "sort": 11360,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-tree-switch-conversion": {
      "can_omit": "yes",
      "choice": [
        "-ftree-switch-conversion",
        "-fno-tree-switch-conversion"
      ],
      "default": "",
      "desc": "compiler flag: -ftree-switch-conversion",
      "sort": 11370,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-tree-ter": {
      "can_omit": "yes",
      "choice": [
        "-ftree-ter",
        "-fno-tree-ter"
      ],
      "default": "",
      "desc": "compiler flag: -ftree-ter",
      "sort": 11380,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-tree-vect-loop-version": {
      "can_omit": "yes",
      "choice": [
        "-ftree-vect-loop-version",
        "-fno-tree-vect-loop-version"
      ],
      "default": "",
      "desc": "compiler flag: -ftree-vect-loop-version",
      "sort": 11390,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-tree-vectorize": {
      "can_omit": "yes",
      "choice": [
        "-ftree-vectorize",
        "-fno-tree-vectorize"
      ],
      "default": "",
      "desc": "compiler flag: -ftree-vectorize",
      "sort": 11400,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-tree-vrp": {
      "can_omit": "yes",
      "choice": [
        "-ftree-vrp",
        "-fno-tree-vrp"
      ],
      "default": "",
      "desc": "compiler flag: -ftree-vrp",
      "sort": 11410,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-unit-at-a-time": {
      "can_omit": "yes",
      "choice": [
        "-funit-at-a-time",
        "-fno-unit-at-a-time"
      ],
      "default": "",
      "desc": "compiler flag: -funit-at-a-time",
      "sort": 11420,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-unroll-all-loops": {
      "can_omit": "yes",
      "choice": [
        "-funroll-all-loops",
        "-fno-unroll-all-loops"
      ],
      "default": "",
      "desc": "compiler flag: -funroll-all-loops",
      "sort": 11430,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-unroll-loops": {
      "can_omit": "yes",
      "choice": [
        "-funroll-loops",
        "-fno-unroll-loops"
      ],
      "default": "",
      "desc": "compiler flag: -funroll-loops",
      "sort": 11440,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-unsafe-loop-optimizations": {
      "can_omit": "yes",
      "choice": [
        "-funsafe-loop-optimizations",
        "-fno-unsafe-loop-optimizations"
      ],
      "default": "",
      "desc": "compiler flag: -funsafe-loop-optimizations",
      "sort": 11450,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-unsafe-math-optimizations": {
      "can_omit": "yes",
      "choice": [
        "-funsafe-math-optimizations",
        "-fno-unsafe-math-optimizations"
      ],
      "default": "",
      "desc": "compiler flag: -funsafe-math-optimizations",
      "sort": 11460,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-unswitch-loops": {
      "can_omit": "yes",
      "choice": [
        "-funswitch-loops",
        "-fno-unswitch-loops"
      ],
      "default": "",
      "desc": "compiler flag: -funswitch-loops",
      "sort": 11470,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-variable-expansion-in-unroller": {
      "can_omit": "yes",
      "choice": [
        "-fvariable-expansion-in-unroller",
        "-fno-variable-expansion-in-unroller"
      ],
      "default": "",
      "desc": "compiler flag: -fvariable-expansion-in-unroller",
      "sort": 11480,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-vect-cost-model": {
      "can_omit": "yes",
      "choice": [
        "-fvect-cost-model",
        "-fno-vect-cost-model"
      ],
      "default": "",
      "desc": "compiler flag: -fvect-cost-model",
      "sort": 11490,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-vpt": {
      "can_omit": "yes",
      "choice": [
        "-fvpt",
        "-fno-vpt"
      ],
      "default": "",
      "desc": "compiler flag: -fvpt",
      "sort": 11500,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-web": {
      "can_omit": "yes",
      "choice": [
        "-fweb",
        "-fno-web"
      ],
      "default": "",
      "desc": "compiler flag: -fweb",
      "sort": 11510,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-whole-program": {
      "can_omit": "yes",
      "choice": [
        "-fwhole-program",
        "-fno-whole-program"
      ],
      "default": "",
      "desc": "compiler flag: -fwhole-program",
      "sort": 11520,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-zero-initialized-in-bss": {
      "can_omit": "yes",
      "choice": [
        "-fzero-initialized-in-bss",
        "-fno-zero-initialized-in-bss"
      ],
      "default": "",
      "desc": "compiler flag: -fno-zero-initialized-in-bss",
      "sort": 10800,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##param--falign-functions[=": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: -falign-functions=",
      "explore_prefix": "-falign-functions=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 0,
      "sort": 30010,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param--falign-jumps=": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: -falign-jumps=",
      "explore_prefix": "-falign-jumps=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 0,
      "sort": 30020,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param--falign-labels=": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: -falign-labels=",
      "explore_prefix": "-falign-labels=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 0,
      "sort": 30030,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param--falign-loops=": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: -falign-loops=",
      "explore_prefix": "-falign-loops=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 0,
      "sort": 30040,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param--finline-limit=": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: -finline-limit=",
      "explore_prefix": "-finline-limit=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 0,
      "sort": 30050,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param--fsched-stalled-insns-dep=": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: -fsched-stalled-insns-dep=",
      "explore_prefix": "-fsched-stalled-insns-dep=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 0,
      "sort": 30090,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param--fsched-stalled-insns=": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: -fsched-stalled-insns=",
      "explore_prefix": "-fsched-stalled-insns=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 0,
      "sort": 30100,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param--ftree-parallelize-loops=": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: -ftree-parallelize-loops=",
      "explore_prefix": "-ftree-parallelize-loops=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 0,
      "sort": 30110,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-align-loop-iterations": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param align-loop-iterations= (Loops iterating at least selected number of iterations will get loop alignement.)",
      "explore_prefix": "--param align-loop-iterations=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 8,
      "sort": 30590,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-align-threshold": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param align-threshold= (Select fraction of the maximal frequency of executions of basic block in function given basic block get alignment)",
      "explore_prefix": "--param align-threshold=",
      "explore_start": 1,
      "explore_step": 1,
      "explore_stop": 200,
      "sort": 30580,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-avg-aliased-vops": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param avg-aliased-vops= (The average number of virtual operators that memory statements are allowed to have before triggering memory partitioning heuristics)",
      "explore_prefix": "--param avg-aliased-vops=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 2,
      "sort": 30920,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-gcse-after-reload-critical-fraction": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param gcse-after-reload-critical-fraction= (The threshold ratio of critical edges execution count that permit performing redundancy elimination after reload)",
      "explore_prefix": "--param gcse-after-reload-critical-fraction=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 20,
      "sort": 30400,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-gcse-after-reload-partial-fraction": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param gcse-after-reload-partial-fraction= (The threshold ratio for performing partial redundancy elimination after reload)",
      "explore_prefix": "--param gcse-after-reload-partial-fraction=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 6,
      "sort": 30390,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-hot-bb-count-fraction": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param hot-bb-count-fraction= (Select fraction of the maximal count of repetitions of basic block in program given basic block needs to have to be considered hot)",
      "explore_prefix": "--param hot-bb-count-fraction=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 20000,
      "sort": 30560,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-hot-bb-frequency-fraction": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param hot-bb-frequency-fraction= (Select fraction of the maximal frequency of executions of basic block in function given basic block needs to have to be considered hot)",
      "explore_prefix": "--param hot-bb-frequency-fraction=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 2000,
      "sort": 30570,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-inline-call-cost": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param inline-call-cost= (expense of call operation relative to ordinary arithmetic operations)",
      "explore_prefix": "--param inline-call-cost=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 24,
      "sort": 30340,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-inline-unit-growth": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param inline-unit-growth= (how much can given compilation unit grow because of the inlining (in percent))",
      "explore_prefix": "--param inline-unit-growth=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 60,
      "sort": 30320,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-integer-share-limit": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param integer-share-limit= (The upper bound for sharing integer constants)",
      "explore_prefix": "--param integer-share-limit=",
      "explore_start": 2,
      "explore_step": 1,
      "explore_stop": 512,
      "sort": 31060,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-ipcp-unit-growth": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param ipcp-unit-growth= (how much can given compilation unit grow because of the interprocedural constant propagation (in percent))",
      "explore_prefix": "--param ipcp-unit-growth=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 20,
      "sort": 30330,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-ira-max-conflict-table-size": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param ira-max-conflict-table-size= (max size of conflict table in MB)",
      "explore_prefix": "--param ira-max-conflict-table-size=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 2000,
      "sort": 31220,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-ira-max-loops-num": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param ira-max-loops-num= (max loops number for regional RA)",
      "explore_prefix": "--param ira-max-loops-num=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 200,
      "sort": 31210,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-iv-always-prune-cand-set-bound": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param iv-always-prune-cand-set-bound= (If number of candidates in the set is smaller, we always try to remove unused ivs during its optimization)",
      "explore_prefix": "--param iv-always-prune-cand-set-bound=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 20,
      "sort": 30760,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-iv-consider-all-candidates-bound": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param iv-consider-all-candidates-bound= (Bound on number of candidates below that all candidates are considered in iv optimizations)",
      "explore_prefix": "--param iv-consider-all-candidates-bound=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 60,
      "sort": 30740,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-iv-max-considered-uses": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param iv-max-considered-uses= (Bound on number of iv uses in loop optimized in iv optimizations)",
      "explore_prefix": "--param iv-max-considered-uses=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 500,
      "sort": 30750,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-l1-cache-line-size": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param l1-cache-line-size= (The size of L1 cache line)",
      "explore_prefix": "--param l1-cache-line-size=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 64,
      "sort": 31160,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-l1-cache-size": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param l1-cache-size= (The size of L1 cache)",
      "explore_prefix": "--param l1-cache-size=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 128,
      "sort": 31150,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-l2-cache-size": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param l2-cache-size= (The size of L2 cache)",
      "explore_prefix": "--param l2-cache-size=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 1024,
      "sort": 31170,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-large-function-growth": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param large-function-growth= (Maximal growth due to inlining of large function (in percent))",
      "explore_prefix": "--param large-function-growth=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 200,
      "sort": 30300,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-large-function-insns": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param large-function-insns= (The size of function body to be considered large)",
      "explore_prefix": "--param large-function-insns=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 5400,
      "sort": 30290,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-large-stack-frame": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param large-stack-frame= (The size of stack frame to be considered large)",
      "explore_prefix": "--param large-stack-frame=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 512,
      "sort": 30350,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-large-stack-frame-growth": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param large-stack-frame-growth= (Maximal stack frame growth due to inlining (in percent))",
      "explore_prefix": "--param large-stack-frame-growth=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 2000,
      "sort": 30360,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-large-unit-insns": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param large-unit-insns= (The size of translation unit to be considered large)",
      "explore_prefix": "--param large-unit-insns=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 20000,
      "sort": 30310,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-lim-expensive": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param lim-expensive= (The minimum cost of an expensive expression in the loop invariant motion)",
      "explore_prefix": "--param lim-expensive=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 40,
      "sort": 30730,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-loop-invariant-max-bbs-in-loop": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param loop-invariant-max-bbs-in-loop= (max basic blocks number in loop for loop invariant motion)",
      "explore_prefix": "--param loop-invariant-max-bbs-in-loop=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 20000,
      "sort": 31240,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-aliased-vops": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-aliased-vops= (The maximum number of virtual operators that a function is allowed to have before triggering memory partitioning heuristics)",
      "explore_prefix": "--param max-aliased-vops=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 200,
      "sort": 30910,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-average-unrolled-insns": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-average-unrolled-insns= (The maximum number of instructions to consider to unroll in a loop on average)",
      "explore_prefix": "--param max-average-unrolled-insns=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 160,
      "sort": 30420,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-completely-peel-times": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-completely-peel-times= (The maximum number of peelings of a single loop that is peeled completely)",
      "explore_prefix": "--param max-completely-peel-times=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 32,
      "sort": 30470,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-completely-peeled-insns": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-completely-peeled-insns= (The maximum number of insns of a completely peeled loop)",
      "explore_prefix": "--param max-completely-peeled-insns=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 800,
      "sort": 30460,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-crossjump-edges": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-crossjump-edges= (The maximum number of incoming edges to consider for crossjumping)",
      "explore_prefix": "--param max-crossjump-edges=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 200,
      "sort": 30670,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-cse-insns": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-cse-insns= (The maximum instructions CSE process before flushing)",
      "explore_prefix": "--param max-cse-insns=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 2000,
      "sort": 30720,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-cse-path-length": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-cse-path-length= (The maximum length of path considered in cse)",
      "explore_prefix": "--param max-cse-path-length=",
      "explore_start": 1,
      "explore_step": 1,
      "explore_stop": 20,
      "sort": 30710,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-cselib-memory-locations": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-cselib-memory-locations= (The maximum memory locations recorded by cselib)",
      "explore_prefix": "--param max-cselib-memory-locations=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 1000,
      "sort": 30870,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-delay-slot-insn-search": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-delay-slot-insn-search= (The maximum number of instructions to consider to fill a delay slot)",
      "explore_prefix": "--param max-delay-slot-insn-search=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 200,
      "sort": 30260,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-delay-slot-live-search": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-delay-slot-live-search= (The maximum number of instructions to consider to find accurate live register information)",
      "explore_prefix": "--param max-delay-slot-live-search=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 666,
      "sort": 30270,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-fields-for-field-sensitive": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-fields-for-field-sensitive= (Maximum number of fields in a structure before pointer analysis treats the structure as a single variable)",
      "explore_prefix": "--param max-fields-for-field-sensitive=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 0,
      "sort": 31110,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-gcse-passes": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-gcse-passes= (The maximum number of passes to make when doing GCSE)",
      "explore_prefix": "--param max-gcse-passes=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 2,
      "sort": 30380,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-goto-duplication-insns": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-goto-duplication-insns= (The maximum number of insns to duplicate when unfactoring computed gotos)",
      "explore_prefix": "--param max-goto-duplication-insns=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 16,
      "sort": 30700,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-grow-copy-bb-insns": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-grow-copy-bb-insns= (The maximum expansion factor when copying basic blocks)",
      "explore_prefix": "--param max-grow-copy-bb-insns=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 16,
      "sort": 30690,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-inline-insns-auto": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-inline-insns-auto= (The maximum number of instructions when automatically inlining)",
      "explore_prefix": "--param max-inline-insns-auto=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 180,
      "sort": 30180,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-inline-insns-recursive": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-inline-insns-recursive= (The maximum number of instructions inline function can grow to via recursive inlining)",
      "explore_prefix": "--param max-inline-insns-recursive=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 900,
      "sort": 30190,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-inline-insns-recursive-auto": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-inline-insns-recursive-auto= (The maximum number of instructions non-inline function can grow to via recursive inlining)",
      "explore_prefix": "--param max-inline-insns-recursive-auto=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 900,
      "sort": 30200,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-inline-insns-single": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-inline-insns-single= (The maximum number of instructions in a single function eligible for inlining)",
      "explore_prefix": "--param max-inline-insns-single=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 900,
      "sort": 30170,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-inline-recursive-depth": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-inline-recursive-depth= (The maximum depth of recursive inlining for inline functions)",
      "explore_prefix": "--param max-inline-recursive-depth=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 16,
      "sort": 30210,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-inline-recursive-depth-auto": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-inline-recursive-depth-auto= (The maximum depth of recursive inlining for non-inline functions)",
      "explore_prefix": "--param max-inline-recursive-depth-auto=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 16,
      "sort": 30220,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-iterations-computation-cost": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-iterations-computation-cost= (Bound on the cost of an expression to compute the number of iterations)",
      "explore_prefix": "--param max-iterations-computation-cost=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 20,
      "sort": 30520,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-iterations-to-track": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-iterations-to-track= (Bound on the number of iterations the brute force # of iterations analysis algorithm evaluates)",
      "explore_prefix": "--param max-iterations-to-track=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 2000,
      "sort": 30510,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-jump-thread-duplication-stmts": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-jump-thread-duplication-stmts= (Maximum number of statements allowed in a block that needs to be duplicated when threading jumps)",
      "explore_prefix": "--param max-jump-thread-duplication-stmts=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 30,
      "sort": 31100,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-last-value-rtl": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-last-value-rtl= (The maximum number of RTL nodes that can be recorded as combiner's last value)",
      "explore_prefix": "--param max-last-value-rtl=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 20000,
      "sort": 31050,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-once-peeled-insns": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-once-peeled-insns= (The maximum number of insns of a peeled loop that rolls only once)",
      "explore_prefix": "--param max-once-peeled-insns=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 800,
      "sort": 30480,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-partial-antic-length": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-partial-antic-length= (Maximum length of partial antic set when performing tree pre optimization)",
      "explore_prefix": "--param max-partial-antic-length=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 200,
      "sort": 31190,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-peel-times": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-peel-times= (The maximum number of peelings of a single loop)",
      "explore_prefix": "--param max-peel-times=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 32,
      "sort": 30450,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-peeled-insns": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-peeled-insns= (The maximum number of insns of a peeled loop)",
      "explore_prefix": "--param max-peeled-insns=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 800,
      "sort": 30440,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-pending-list-length": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-pending-list-length= (The maximum length of scheduling's pending operations list)",
      "explore_prefix": "--param max-pending-list-length=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 64,
      "sort": 30280,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-pipeline-region-blocks": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-pipeline-region-blocks= (The maximum number of blocks in a region to be considered for interblock scheduling)",
      "explore_prefix": "--param max-pipeline-region-blocks=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 30,
      "sort": 30950,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-pipeline-region-insns": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-pipeline-region-insns= (The maximum number of insns in a region to be considered for interblock scheduling)",
      "explore_prefix": "--param max-pipeline-region-insns=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 400,
      "sort": 30960,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-predicted-iterations": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-predicted-iterations= (The maximum number of loop iterations we predict statically)",
      "explore_prefix": "--param max-predicted-iterations=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 200,
      "sort": 30600,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-reload-search-insns": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-reload-search-insns= (The maximum number of instructions to search backward when looking for equivalent reload)",
      "explore_prefix": "--param max-reload-search-insns=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 200,
      "sort": 30900,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-sched-extend-regions-iters": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-sched-extend-regions-iters= (The maximum number of iterations through CFG to extend regions)",
      "explore_prefix": "--param max-sched-extend-regions-iters=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 0,
      "sort": 30980,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-sched-insn-conflict-delay": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-sched-insn-conflict-delay= (The maximum conflict delay for an insn to be considered for speculative motion)",
      "explore_prefix": "--param max-sched-insn-conflict-delay=",
      "explore_start": 1,
      "explore_step": 1,
      "explore_stop": 10,
      "sort": 30990,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-sched-ready-insns": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-sched-ready-insns= (The maximum number of instructions ready to be issued to be considered by the scheduler during the first scheduling pass)",
      "explore_prefix": "--param max-sched-ready-insns=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 200,
      "sort": 31120,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-sched-region-blocks": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-sched-region-blocks= (The maximum number of blocks in a region to be considered for interblock scheduling)",
      "explore_prefix": "--param max-sched-region-blocks=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 20,
      "sort": 30930,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-sched-region-insns": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-sched-region-insns= (The maximum number of insns in a region to be considered for interblock scheduling)",
      "explore_prefix": "--param max-sched-region-insns=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 200,
      "sort": 30940,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-unroll-times": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-unroll-times= (The maximum number of unrollings of a single loop)",
      "explore_prefix": "--param max-unroll-times=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 16,
      "sort": 30430,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-unrolled-insns": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-unrolled-insns= (The maximum number of instructions to consider to unroll in a loop)",
      "explore_prefix": "--param max-unrolled-insns=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 400,
      "sort": 30410,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-unswitch-insns": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-unswitch-insns= (The maximum number of insns of an unswitched loop)",
      "explore_prefix": "--param max-unswitch-insns=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 100,
      "sort": 30490,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-unswitch-level": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-unswitch-level= (The maximum number of unswitchings in a single loop)",
      "explore_prefix": "--param max-unswitch-level=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 6,
      "sort": 30500,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-variable-expansions-in-unroller": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-variable-expansions-in-unroller= (If -fvariable-expansion-in-unroller is used, the maximum number of times that an individual variable will be expanded during loop unrolling)",
      "explore_prefix": "--param max-variable-expansions-in-unroller=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 2,
      "sort": 30240,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-min-crossjump-insns": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param min-crossjump-insns= (The minimum number of matching instructions to consider for crossjumping)",
      "explore_prefix": "--param min-crossjump-insns=",
      "explore_start": 1,
      "explore_step": 1,
      "explore_stop": 10,
      "sort": 30680,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-min-inline-recursive-probability": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param min-inline-recursive-probability= (Inline recursively only when the probability of call being executed exceeds the parameter)",
      "explore_prefix": "--param min-inline-recursive-probability=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 20,
      "sort": 30230,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-min-spec-prob": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param min-spec-prob= (The minimum probability of reaching a source block for interblock speculative scheduling)",
      "explore_prefix": "--param min-spec-prob=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 80,
      "sort": 30970,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-min-vect-loop-bound": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param min-vect-loop-bound= (If -ftree-vectorize is used, the minimal loop bound of a loop to be considered for vectorization)",
      "explore_prefix": "--param min-vect-loop-bound=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 2,
      "sort": 30250,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-min-virtual-mappings": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param min-virtual-mappings= (Minimum number of virtual mappings to consider switching to full virtual renames)",
      "explore_prefix": "--param min-virtual-mappings=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 200,
      "sort": 31070,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-omega-eliminate-redundant-constraints": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param omega-eliminate-redundant-constraints= (When set to 1, use expensive methods to eliminate all redundant constraints)",
      "explore_prefix": "--param omega-eliminate-redundant-constraints=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 1,
      "sort": 30840,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-omega-hash-table-size": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param omega-hash-table-size= (Bound on the size of the hash table in Omega constraint systems)",
      "explore_prefix": "--param omega-hash-table-size=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 1100,
      "sort": 30820,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-omega-max-eqs": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param omega-max-eqs= (Bound on the number of equalities in Omega constraint systems)",
      "explore_prefix": "--param omega-max-eqs=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 256,
      "sort": 30800,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-omega-max-geqs": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param omega-max-geqs= (Bound on the number of inequalities in Omega constraint systems)",
      "explore_prefix": "--param omega-max-geqs=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 512,
      "sort": 30790,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-omega-max-keys": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param omega-max-keys= (Bound on the number of keys in Omega constraint systems)",
      "explore_prefix": "--param omega-max-keys=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 1000,
      "sort": 30830,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-omega-max-vars": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param omega-max-vars= (Bound on the number of variables in Omega constraint systems)",
      "explore_prefix": "--param omega-max-vars=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 256,
      "sort": 30780,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-omega-max-wild-cards": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param omega-max-wild-cards= (Bound on the number of wild cards in Omega constraint systems)",
      "explore_prefix": "--param omega-max-wild-cards=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 36,
      "sort": 30810,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-predictable-branch-outcome": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param predictable-branch-outcome= (Maximal esitmated outcome of branch considered predictable)",
      "explore_prefix": "--param predictable-branch-outcome=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 50,
      "sort": 30160,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-prefetch-latency": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param prefetch-latency= (The number of insns executed before prefetch is completed)",
      "explore_prefix": "--param prefetch-latency=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 400,
      "sort": 31130,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-sccvn-max-scc-size": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param sccvn-max-scc-size= (Maximum size of a SCC before SCCVN stops processing a function)",
      "explore_prefix": "--param sccvn-max-scc-size=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 20000,
      "sort": 31200,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-scev-max-expr-size": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param scev-max-expr-size= (Bound on size of expressions used in the scalar evolutions analyzer)",
      "explore_prefix": "--param scev-max-expr-size=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 40,
      "sort": 30770,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-sched-mem-true-dep-cost": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param sched-mem-true-dep-cost= (Minimal distance between possibly conflicting store and load)",
      "explore_prefix": "--param sched-mem-true-dep-cost=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 2,
      "sort": 31040,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-sched-spec-prob-cutoff": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param sched-spec-prob-cutoff= (The minimal probability of speculation success (in percents), so that speculative insn will be scheduled.)",
      "explore_prefix": "--param sched-spec-prob-cutoff=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 100,
      "sort": 31000,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-selsched-insns-to-rename": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param selsched-insns-to-rename= (Maximum number of instructions in the ready list that are considered eligible for renaming)",
      "explore_prefix": "--param selsched-insns-to-rename=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 4,
      "sort": 31030,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-selsched-max-lookahead": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param selsched-max-lookahead= (The maximum size of the lookahead window of selective scheduling)",
      "explore_prefix": "--param selsched-max-lookahead=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 100,
      "sort": 31010,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-selsched-max-sched-times": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param selsched-max-sched-times= (Maximum number of times that an insn could be scheduled)",
      "explore_prefix": "--param selsched-max-sched-times=",
      "explore_start": 1,
      "explore_step": 1,
      "explore_stop": 4,
      "sort": 31020,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-simultaneous-prefetches": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param simultaneous-prefetches= (The number of prefetches that can run at the same time)",
      "explore_prefix": "--param simultaneous-prefetches=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 6,
      "sort": 31140,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-sms-dfa-history": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param sms-dfa-history= (The number of cycles the swing modulo scheduler considers when checking conflicts using DFA)",
      "explore_prefix": "--param sms-dfa-history=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 0,
      "sort": 30540,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-sms-loop-average-count-threshold": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param sms-loop-average-count-threshold= (A threshold on the average loop count considered by the swing modulo scheduler)",
      "explore_prefix": "--param sms-loop-average-count-threshold=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 0,
      "sort": 30550,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-sms-max-ii-factor": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param sms-max-ii-factor= (A factor for tuning the upper bound that swing modulo scheduler uses for scheduling a loop)",
      "explore_prefix": "--param sms-max-ii-factor=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 200,
      "sort": 30530,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-sra-field-structure-ratio": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param sra-field-structure-ratio= (The threshold ratio between instantiated fields and the total structure size)",
      "explore_prefix": "--param sra-field-structure-ratio=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 100,
      "sort": 30140,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-sra-max-structure-count": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param sra-max-structure-count= (The maximum number of structure fields for which GCC willuse by-element copies)",
      "explore_prefix": "--param sra-max-structure-count=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 0,
      "sort": 30130,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-sra-max-structure-size": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param sra-max-structure-size= (The maximum structure size (in bytes) for which GCC willuse by-element copies)",
      "explore_prefix": "--param sra-max-structure-size=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 0,
      "sort": 30120,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-ssp-buffer-size": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param ssp-buffer-size= (The lower bound for a buffer to be considered for stack smashing protection)",
      "explore_prefix": "--param ssp-buffer-size=",
      "explore_start": 1,
      "explore_step": 1,
      "explore_stop": 16,
      "sort": 31090,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-struct-reorg-cold-struct-ratio": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param struct-reorg-cold-struct-ratio= (The threshold ratio between current and hottest structure counts)",
      "explore_prefix": "--param struct-reorg-cold-struct-ratio=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 100,
      "sort": 30150,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-switch-conversion-max-branch-ratio": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param switch-conversion-max-branch-ratio= (The maximum ratio between array size and switch branches fora switch conversion to take place)",
      "explore_prefix": "--param switch-conversion-max-branch-ratio=",
      "explore_start": 1,
      "explore_step": 1,
      "explore_stop": 16,
      "sort": 31230,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-tracer-max-code-growth": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param tracer-max-code-growth= (Maximal code growth caused by tail duplication (in percent))",
      "explore_prefix": "--param tracer-max-code-growth=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 200,
      "sort": 30630,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-tracer-min-branch-probability": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param tracer-min-branch-probability= (Stop forward growth if the probability of best edge is less than this threshold (in percent). Used when profile feedback is not available)",
      "explore_prefix": "--param tracer-min-branch-probability=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 100,
      "sort": 30660,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-tracer-min-branch-probability-feedback": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param tracer-min-branch-probability-feedback= (Stop forward growth if the probability of best edge is less than this threshold (in percent). Used when profile feedback is available)",
      "explore_prefix": "--param tracer-min-branch-probability-feedback=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 100,
      "sort": 30650,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-tracer-min-branch-ratio": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param tracer-min-branch-ratio= (Stop reverse growth if the reverse probability of best edge is less than this threshold (in percent))",
      "explore_prefix": "--param tracer-min-branch-ratio=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 100,
      "sort": 30640,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-use-canonical-types": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param use-canonical-types= (Whether to use canonical types)",
      "explore_prefix": "--param use-canonical-types=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 1,
      "sort": 31180,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-vect-max-version-for-alias-checks": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param vect-max-version-for-alias-checks= (Bound on number of runtime checks inserted by the vectorizer's loop versioning for alias check)",
      "explore_prefix": "--param vect-max-version-for-alias-checks=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 20,
      "sort": 30860,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-vect-max-version-for-alignment-checks": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param vect-max-version-for-alignment-checks= (Bound on number of runtime checks inserted by the vectorizer's loop versioning for alignment check)",
      "explore_prefix": "--param vect-max-version-for-alignment-checks=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 12,
      "sort": 30850,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-virtual-mappings-ratio": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param virtual-mappings-ratio= (Ratio between virtual mappings and virtual symbols to do full virtual renames)",
      "explore_prefix": "--param virtual-mappings-ratio=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 6,
      "sort": 31080,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    }
  }
}
