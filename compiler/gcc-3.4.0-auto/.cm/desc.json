{
  "all_compiler_flags_desc": {
    "##base_opt": {
      "choice": [
        "-O3",
        "-O0",
        "-O1",
        "-O2",
        "-Os}"
      ],
      "default": "",
      "desc": "base compiler flag",
      "sort": 10000,
      "tags": [
        "base",
        "basic",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-branch-count-reg": {
      "can_omit": "yes",
      "choice": [
        "-fbranch-count-reg",
        "-fno-branch-count-reg"
      ],
      "default": "",
      "desc": "compiler flag: -fno-branch-count-reg",
      "sort": 10330,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-branch-probabilities": {
      "can_omit": "yes",
      "choice": [
        "-fbranch-probabilities",
        "-fno-branch-probabilities"
      ],
      "default": "",
      "desc": "compiler flag: -fbranch-probabilities",
      "sort": 10010,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-branch-target-load-optimize": {
      "can_omit": "yes",
      "choice": [
        "-fbranch-target-load-optimize",
        "-fno-branch-target-load-optimize"
      ],
      "default": "",
      "desc": "compiler flag: -fbranch-target-load-optimize",
      "sort": 10030,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-branch-target-load-optimize2": {
      "can_omit": "yes",
      "choice": [
        "-fbranch-target-load-optimize2",
        "-fno-branch-target-load-optimize2"
      ],
      "default": "",
      "desc": "compiler flag: -fbranch-target-load-optimize2",
      "sort": 10040,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-caller-saves": {
      "can_omit": "yes",
      "choice": [
        "-fcaller-saves",
        "-fno-caller-saves"
      ],
      "default": "",
      "desc": "compiler flag: -fcaller-saves",
      "sort": 10050,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-cprop-registers": {
      "can_omit": "yes",
      "choice": [
        "-fcprop-registers",
        "-fno-cprop-registers"
      ],
      "default": "",
      "desc": "compiler flag: -fcprop-registers",
      "sort": 10060,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-crossjumping": {
      "can_omit": "yes",
      "choice": [
        "-fcrossjumping",
        "-fno-crossjumping"
      ],
      "default": "",
      "desc": "compiler flag: -fcrossjumping",
      "sort": 10230,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-cse-follow-jumps": {
      "can_omit": "yes",
      "choice": [
        "-fcse-follow-jumps",
        "-fno-cse-follow-jumps"
      ],
      "default": "",
      "desc": "compiler flag: -fcse-follow-jumps",
      "sort": 10070,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-cse-skip-blocks": {
      "can_omit": "yes",
      "choice": [
        "-fcse-skip-blocks",
        "-fno-cse-skip-blocks"
      ],
      "default": "",
      "desc": "compiler flag: -fcse-skip-blocks",
      "sort": 10080,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-data-sections": {
      "can_omit": "yes",
      "choice": [
        "-fdata-sections",
        "-fno-data-sections"
      ],
      "default": "",
      "desc": "compiler flag: -fdata-sections",
      "sort": 10090,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-default-inline": {
      "can_omit": "yes",
      "choice": [
        "-fdefault-inline",
        "-fno-default-inline"
      ],
      "default": "",
      "desc": "compiler flag: -fno-default-inline",
      "sort": 10340,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-defer-pop": {
      "can_omit": "yes",
      "choice": [
        "-fdefer-pop",
        "-fno-defer-pop"
      ],
      "default": "",
      "desc": "compiler flag: -fno-defer-pop",
      "sort": 10350,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-delayed-branch": {
      "can_omit": "yes",
      "choice": [
        "-fdelayed-branch",
        "-fno-delayed-branch"
      ],
      "default": "",
      "desc": "compiler flag: -fdelayed-branch",
      "sort": 10100,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-delete-null-pointer-checks": {
      "can_omit": "yes",
      "choice": [
        "-fdelete-null-pointer-checks",
        "-fno-delete-null-pointer-checks"
      ],
      "default": "",
      "desc": "compiler flag: -fdelete-null-pointer-checks",
      "sort": 10110,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-expensive-optimizations": {
      "can_omit": "yes",
      "choice": [
        "-fexpensive-optimizations",
        "-fno-expensive-optimizations"
      ],
      "default": "",
      "desc": "compiler flag: -fexpensive-optimizations",
      "sort": 10120,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-fast-math": {
      "can_omit": "yes",
      "choice": [
        "-ffast-math",
        "-fno-fast-math"
      ],
      "default": "",
      "desc": "compiler flag: -ffast-math",
      "sort": 10130,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-finite-math-only": {
      "can_omit": "yes",
      "choice": [
        "-ffinite-math-only",
        "-fno-finite-math-only"
      ],
      "default": "",
      "desc": "compiler flag: -ffinite-math-only",
      "sort": 10430,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-float-store": {
      "can_omit": "yes",
      "choice": [
        "-ffloat-store",
        "-fno-float-store"
      ],
      "default": "",
      "desc": "compiler flag: -ffloat-store",
      "sort": 10140,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-force-addr": {
      "can_omit": "yes",
      "choice": [
        "-fforce-addr",
        "-fno-force-addr"
      ],
      "default": "",
      "desc": "compiler flag: -fforce-addr",
      "sort": 10150,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-force-mem": {
      "can_omit": "yes",
      "choice": [
        "-fforce-mem",
        "-fno-force-mem"
      ],
      "default": "",
      "desc": "compiler flag: -fforce-mem",
      "sort": 10160,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-function-cse": {
      "can_omit": "yes",
      "choice": [
        "-ffunction-cse",
        "-fno-function-cse"
      ],
      "default": "",
      "desc": "compiler flag: -fno-function-cse",
      "sort": 10360,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-function-sections": {
      "can_omit": "yes",
      "choice": [
        "-ffunction-sections",
        "-fno-function-sections"
      ],
      "default": "",
      "desc": "compiler flag: -ffunction-sections",
      "sort": 10170,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-gcse": {
      "can_omit": "yes",
      "choice": [
        "-fgcse",
        "-fno-gcse"
      ],
      "default": "",
      "desc": "compiler flag: -fgcse",
      "sort": 10180,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-gcse-las": {
      "can_omit": "yes",
      "choice": [
        "-fgcse-las",
        "-fno-gcse-las"
      ],
      "default": "",
      "desc": "compiler flag: -fgcse-las",
      "sort": 10210,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-gcse-lm": {
      "can_omit": "yes",
      "choice": [
        "-fgcse-lm",
        "-fno-gcse-lm"
      ],
      "default": "",
      "desc": "compiler flag: -fgcse-lm",
      "sort": 10190,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-gcse-sm": {
      "can_omit": "yes",
      "choice": [
        "-fgcse-sm",
        "-fno-gcse-sm"
      ],
      "default": "",
      "desc": "compiler flag: -fgcse-sm",
      "sort": 10200,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-guess-branch-probability": {
      "can_omit": "yes",
      "choice": [
        "-fguess-branch-probability",
        "-fno-guess-branch-probability"
      ],
      "default": "",
      "desc": "compiler flag: -fno-guess-branch-probability",
      "sort": 10370,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-if-conversion": {
      "can_omit": "yes",
      "choice": [
        "-fif-conversion",
        "-fno-if-conversion"
      ],
      "default": "",
      "desc": "compiler flag: -fif-conversion",
      "sort": 10240,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-if-conversion2": {
      "can_omit": "yes",
      "choice": [
        "-fif-conversion2",
        "-fno-if-conversion2"
      ],
      "default": "",
      "desc": "compiler flag: -fif-conversion2",
      "sort": 10250,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-inline": {
      "can_omit": "yes",
      "choice": [
        "-finline",
        "-fno-inline"
      ],
      "default": "",
      "desc": "compiler flag: -fno-inline",
      "sort": 10380,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-inline-functions": {
      "can_omit": "yes",
      "choice": [
        "-finline-functions",
        "-fno-inline-functions"
      ],
      "default": "",
      "desc": "compiler flag: -finline-functions",
      "sort": 10260,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-keep-inline-functions": {
      "can_omit": "yes",
      "choice": [
        "-fkeep-inline-functions",
        "-fno-keep-inline-functions"
      ],
      "default": "",
      "desc": "compiler flag: -fkeep-inline-functions",
      "sort": 10270,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-keep-static-consts": {
      "can_omit": "yes",
      "choice": [
        "-fkeep-static-consts",
        "-fno-keep-static-consts"
      ],
      "default": "",
      "desc": "compiler flag: -fkeep-static-consts",
      "sort": 10280,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-loop-optimize": {
      "can_omit": "yes",
      "choice": [
        "-floop-optimize",
        "-fno-loop-optimize"
      ],
      "default": "",
      "desc": "compiler flag: -floop-optimize",
      "sort": 10220,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-math-errno": {
      "can_omit": "yes",
      "choice": [
        "-fmath-errno",
        "-fno-math-errno"
      ],
      "default": "",
      "desc": "compiler flag: -fno-math-errno",
      "sort": 10390,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-merge-all-constants": {
      "can_omit": "yes",
      "choice": [
        "-fmerge-all-constants",
        "-fno-merge-all-constants"
      ],
      "default": "",
      "desc": "compiler flag: -fmerge-all-constants",
      "sort": 10300,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-merge-constants": {
      "can_omit": "yes",
      "choice": [
        "-fmerge-constants",
        "-fno-merge-constants"
      ],
      "default": "",
      "desc": "compiler flag: -fmerge-constants",
      "sort": 10290,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-move-all-movables": {
      "can_omit": "yes",
      "choice": [
        "-fmove-all-movables",
        "-fno-move-all-movables"
      ],
      "default": "",
      "desc": "compiler flag: -fmove-all-movables",
      "sort": 10310,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-new-ra": {
      "can_omit": "yes",
      "choice": [
        "-fnew-ra",
        "-fno-new-ra"
      ],
      "default": "",
      "desc": "compiler flag: -fnew-ra",
      "sort": 10320,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-old-unroll-all-loops": {
      "can_omit": "yes",
      "choice": [
        "-fold-unroll-all-loops",
        "-fno-old-unroll-all-loops"
      ],
      "default": "",
      "desc": "compiler flag: -fold-unroll-all-loops",
      "sort": 10770,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-old-unroll-loops": {
      "can_omit": "yes",
      "choice": [
        "-fold-unroll-loops",
        "-fno-old-unroll-loops"
      ],
      "default": "",
      "desc": "compiler flag: -fold-unroll-loops",
      "sort": 10760,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-omit-frame-pointer": {
      "can_omit": "yes",
      "choice": [
        "-fomit-frame-pointer",
        "-fno-omit-frame-pointer"
      ],
      "default": "",
      "desc": "compiler flag: -fomit-frame-pointer",
      "sort": 10460,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-optimize-register-move": {
      "can_omit": "yes",
      "choice": [
        "-foptimize-register-move",
        "-fno-optimize-register-move"
      ],
      "default": "",
      "desc": "compiler flag: -foptimize-register-move",
      "sort": 10470,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-optimize-sibling-calls": {
      "can_omit": "yes",
      "choice": [
        "-foptimize-sibling-calls",
        "-fno-optimize-sibling-calls"
      ],
      "default": "",
      "desc": "compiler flag: -foptimize-sibling-calls",
      "sort": 10480,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-peel-loops": {
      "can_omit": "yes",
      "choice": [
        "-fpeel-loops",
        "-fno-peel-loops"
      ],
      "default": "",
      "desc": "compiler flag: -fpeel-loops",
      "sort": 10740,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-peephole": {
      "can_omit": "yes",
      "choice": [
        "-fpeephole",
        "-fno-peephole"
      ],
      "default": "",
      "desc": "compiler flag: -fno-peephole",
      "sort": 10400,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-peephole2": {
      "can_omit": "yes",
      "choice": [
        "-fpeephole2",
        "-fno-peephole2"
      ],
      "default": "",
      "desc": "compiler flag: -fno-peephole2",
      "sort": 10410,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-prefetch-loop-arrays": {
      "can_omit": "yes",
      "choice": [
        "-fprefetch-loop-arrays",
        "-fno-prefetch-loop-arrays"
      ],
      "default": "",
      "desc": "compiler flag: -fprefetch-loop-arrays",
      "sort": 10490,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-reduce-all-givs": {
      "can_omit": "yes",
      "choice": [
        "-freduce-all-givs",
        "-fno-reduce-all-givs"
      ],
      "default": "",
      "desc": "compiler flag: -freduce-all-givs",
      "sort": 10500,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-regmove": {
      "can_omit": "yes",
      "choice": [
        "-fregmove",
        "-fno-regmove"
      ],
      "default": "",
      "desc": "compiler flag: -fregmove",
      "sort": 10510,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-rename-registers": {
      "can_omit": "yes",
      "choice": [
        "-frename-registers",
        "-fno-rename-registers"
      ],
      "default": "",
      "desc": "compiler flag: -frename-registers",
      "sort": 10520,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-reorder-blocks": {
      "can_omit": "yes",
      "choice": [
        "-freorder-blocks",
        "-fno-reorder-blocks"
      ],
      "default": "",
      "desc": "compiler flag: -freorder-blocks",
      "sort": 10530,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-reorder-functions": {
      "can_omit": "yes",
      "choice": [
        "-freorder-functions",
        "-fno-reorder-functions"
      ],
      "default": "",
      "desc": "compiler flag: -freorder-functions",
      "sort": 10540,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-rerun-cse-after-loop": {
      "can_omit": "yes",
      "choice": [
        "-frerun-cse-after-loop",
        "-fno-rerun-cse-after-loop"
      ],
      "default": "",
      "desc": "compiler flag: -frerun-cse-after-loop",
      "sort": 10550,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-rerun-loop-opt": {
      "can_omit": "yes",
      "choice": [
        "-frerun-loop-opt",
        "-fno-rerun-loop-opt"
      ],
      "default": "",
      "desc": "compiler flag: -frerun-loop-opt",
      "sort": 10560,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-rounding-math": {
      "can_omit": "yes",
      "choice": [
        "-frounding-math",
        "-fno-rounding-math"
      ],
      "default": "",
      "desc": "compiler flag: -frounding-math",
      "sort": 10570,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-sched-interblock": {
      "can_omit": "yes",
      "choice": [
        "-fsched-interblock",
        "-fno-sched-interblock"
      ],
      "default": "",
      "desc": "compiler flag: -fno-sched-interblock",
      "sort": 10600,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-sched-spec": {
      "can_omit": "yes",
      "choice": [
        "-fsched-spec",
        "-fno-sched-spec"
      ],
      "default": "",
      "desc": "compiler flag: -fno-sched-spec",
      "sort": 10610,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-sched-spec-load": {
      "can_omit": "yes",
      "choice": [
        "-fsched-spec-load",
        "-fno-sched-spec-load"
      ],
      "default": "",
      "desc": "compiler flag: -fsched-spec-load",
      "sort": 10620,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-sched-spec-load-dangerous": {
      "can_omit": "yes",
      "choice": [
        "-fsched-spec-load-dangerous",
        "-fno-sched-spec-load-dangerous"
      ],
      "default": "",
      "desc": "compiler flag: -fsched-spec-load-dangerous",
      "sort": 10630,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-sched2-use-superblocks": {
      "can_omit": "yes",
      "choice": [
        "-fsched2-use-superblocks",
        "-fno-sched2-use-superblocks"
      ],
      "default": "",
      "desc": "compiler flag: -fsched2-use-superblocks",
      "sort": 10640,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-sched2-use-traces": {
      "can_omit": "yes",
      "choice": [
        "-fsched2-use-traces",
        "-fno-sched2-use-traces"
      ],
      "default": "",
      "desc": "compiler flag: -fsched2-use-traces",
      "sort": 10650,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-schedule-insns": {
      "can_omit": "yes",
      "choice": [
        "-fschedule-insns",
        "-fno-schedule-insns"
      ],
      "default": "",
      "desc": "compiler flag: -fschedule-insns",
      "sort": 10580,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-schedule-insns2": {
      "can_omit": "yes",
      "choice": [
        "-fschedule-insns2",
        "-fno-schedule-insns2"
      ],
      "default": "",
      "desc": "compiler flag: -fschedule-insns2",
      "sort": 10590,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-signaling-nans": {
      "can_omit": "yes",
      "choice": [
        "-fsignaling-nans",
        "-fno-signaling-nans"
      ],
      "default": "",
      "desc": "compiler flag: -fsignaling-nans",
      "sort": 10660,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-single-precision-constant": {
      "can_omit": "yes",
      "choice": [
        "-fsingle-precision-constant",
        "-fno-single-precision-constant"
      ],
      "default": "",
      "desc": "compiler flag: -fsingle-precision-constant",
      "sort": 10670,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-strength-reduce": {
      "can_omit": "yes",
      "choice": [
        "-fstrength-reduce",
        "-fno-strength-reduce"
      ],
      "default": "",
      "desc": "compiler flag: -fstrength-reduce",
      "sort": 10680,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-strict-aliasing": {
      "can_omit": "yes",
      "choice": [
        "-fstrict-aliasing",
        "-fno-strict-aliasing"
      ],
      "default": "",
      "desc": "compiler flag: -fstrict-aliasing",
      "sort": 10690,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-thread-jumps": {
      "can_omit": "yes",
      "choice": [
        "-fthread-jumps",
        "-fno-thread-jumps"
      ],
      "default": "",
      "desc": "compiler flag: -fthread-jumps",
      "sort": 10710,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-tracer": {
      "can_omit": "yes",
      "choice": [
        "-ftracer",
        "-fno-tracer"
      ],
      "default": "",
      "desc": "compiler flag: -ftracer",
      "sort": 10700,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-trapping-math": {
      "can_omit": "yes",
      "choice": [
        "-ftrapping-math",
        "-fno-trapping-math"
      ],
      "default": "",
      "desc": "compiler flag: -fno-trapping-math",
      "sort": 10440,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-unroll-all-loops": {
      "can_omit": "yes",
      "choice": [
        "-funroll-all-loops",
        "-fno-unroll-all-loops"
      ],
      "default": "",
      "desc": "compiler flag: -funroll-all-loops",
      "sort": 10720,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-unroll-loops": {
      "can_omit": "yes",
      "choice": [
        "-funroll-loops",
        "-fno-unroll-loops"
      ],
      "default": "",
      "desc": "compiler flag: -funroll-loops",
      "sort": 10730,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-unsafe-math-optimizations": {
      "can_omit": "yes",
      "choice": [
        "-funsafe-math-optimizations",
        "-fno-unsafe-math-optimizations"
      ],
      "default": "",
      "desc": "compiler flag: -funsafe-math-optimizations",
      "sort": 10420,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-unswitch-loops": {
      "can_omit": "yes",
      "choice": [
        "-funswitch-loops",
        "-fno-unswitch-loops"
      ],
      "default": "",
      "desc": "compiler flag: -funswitch-loops",
      "sort": 10750,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-vpt": {
      "can_omit": "yes",
      "choice": [
        "-fvpt",
        "-fno-vpt"
      ],
      "default": "",
      "desc": "compiler flag: -fvpt",
      "sort": 10020,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##bool-zero-initialized-in-bss": {
      "can_omit": "yes",
      "choice": [
        "-fzero-initialized-in-bss",
        "-fno-zero-initialized-in-bss"
      ],
      "default": "",
      "desc": "compiler flag: -fno-zero-initialized-in-bss",
      "sort": 10450,
      "tags": [
        "basic",
        "boolean",
        "optimization"
      ],
      "type": "text"
    },
    "##param--falign-jumps=": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: -falign-jumps=",
      "explore_prefix": "-falign-jumps=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 0,
      "sort": 30010,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param--falign-labels=": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: -falign-labels=",
      "explore_prefix": "-falign-labels=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 0,
      "sort": 30020,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param--falign-loops=": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: -falign-loops=",
      "explore_prefix": "-falign-loops=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 0,
      "sort": 30030,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param--finline-limit=": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: -finline-limit=",
      "explore_prefix": "-finline-limit=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 0,
      "sort": 30040,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param--fsched-stalled-insns=": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: -fsched-stalled-insns=",
      "explore_prefix": "-fsched-stalled-insns=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 0,
      "sort": 30050,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-hot-bb-count-fraction": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param hot-bb-count-fraction= (Select fraction of the maximal count of repetitions of basic block inrogram given basic block needs to have to be considered hot)",
      "explore_prefix": "--param hot-bb-count-fraction=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 20000,
      "sort": 30270,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-hot-bb-frequency-fraction": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param hot-bb-frequency-fraction= (Select fraction of the maximal frequency of executions of basiclock in function given basic block needs to have to be considered hot)",
      "explore_prefix": "--param hot-bb-frequency-fraction=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 2000,
      "sort": 30280,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-inline-unit-growth": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param inline-unit-growth= (how much can given compilation unit grow because of the inlining (in percent))",
      "explore_prefix": "--param inline-unit-growth=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 100,
      "sort": 30140,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-large-function-growth": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param large-function-growth= (Maximal growth due to inlining of large function (in percent))",
      "explore_prefix": "--param large-function-growth=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 200,
      "sort": 30130,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-large-function-insns": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param large-function-insns= (The size of function body to be considered large)",
      "explore_prefix": "--param large-function-insns=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 6000,
      "sort": 30120,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-average-unrolled-insns": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-average-unrolled-insns= (The maximum number of instructions to consider to unroll in a loop on average)",
      "explore_prefix": "--param max-average-unrolled-insns=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 160,
      "sort": 30180,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-completely-peel-times": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-completely-peel-times= (The maximum number of peelings of a single loop that is peeled completely)",
      "explore_prefix": "--param max-completely-peel-times=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 32,
      "sort": 30230,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-completely-peeled-insns": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-completely-peeled-insns= (The maximum number of insns of a completely peeled loop)",
      "explore_prefix": "--param max-completely-peeled-insns=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 800,
      "sort": 30220,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-crossjump-edges": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-crossjump-edges= (The maximum number of incoming edges to consider for crossjumping)",
      "explore_prefix": "--param max-crossjump-edges=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 200,
      "sort": 30350,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-cse-path-length": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-cse-path-length= (The maximum length of path considered in cse)",
      "explore_prefix": "--param max-cse-path-length=",
      "explore_start": 1,
      "explore_step": 1,
      "explore_stop": 20,
      "sort": 30360,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-cselib-memory-locations": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-cselib-memory-locations= (The maximum memory locations recorded by cselib)",
      "explore_prefix": "--param max-cselib-memory-locations=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 1000,
      "sort": 30370,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-delay-slot-insn-search": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-delay-slot-insn-search= (The maximum number of instructions to consider to fill a delay slot)",
      "explore_prefix": "--param max-delay-slot-insn-search=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 200,
      "sort": 30090,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-delay-slot-live-search": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-delay-slot-live-search= (The maximum number of instructions to consider to find accurate live register information)",
      "explore_prefix": "--param max-delay-slot-live-search=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 666,
      "sort": 30100,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-gcse-passes": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-gcse-passes= (The maximum number of passes to make when doing GCSE)",
      "explore_prefix": "--param max-gcse-passes=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 2,
      "sort": 30160,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-inline-insns-auto": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-inline-insns-auto= (The maximum number of instructions when automatically inlining)",
      "explore_prefix": "--param max-inline-insns-auto=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 200,
      "sort": 30070,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-inline-insns-rtl": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-inline-insns-rtl= (The maximum number of instructions for the RTL inliner)",
      "explore_prefix": "--param max-inline-insns-rtl=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 1200,
      "sort": 30080,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-inline-insns-single": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-inline-insns-single= (The maximum number of instructions in a single function eligible for inlining)",
      "explore_prefix": "--param max-inline-insns-single=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 1000,
      "sort": 30060,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-once-peeled-insns": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-once-peeled-insns= (The maximum number of insns of a peeled loop that rolls only once)",
      "explore_prefix": "--param max-once-peeled-insns=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 800,
      "sort": 30240,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-peel-times": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-peel-times= (The maximum number of peelings of a single loop)",
      "explore_prefix": "--param max-peel-times=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 32,
      "sort": 30210,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-peeled-insns": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-peeled-insns= (The maximum number of insns of a peeled loop)",
      "explore_prefix": "--param max-peeled-insns=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 800,
      "sort": 30200,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-pending-list-length": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-pending-list-length= (The maximum length of scheduling's pending operations list)",
      "explore_prefix": "--param max-pending-list-length=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 64,
      "sort": 30110,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-reload-search-insns": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-reload-search-insns= (The maximum number of instructions to search backward when looking for equivalent reload)",
      "explore_prefix": "--param max-reload-search-insns=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 200,
      "sort": 30400,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-unroll-times": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-unroll-times= (The maximum number of unrollings of a single loop)",
      "explore_prefix": "--param max-unroll-times=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 16,
      "sort": 30190,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-unrolled-insns": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-unrolled-insns= (The maximum number of instructions to consider to unroll in a loop)",
      "explore_prefix": "--param max-unrolled-insns=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 400,
      "sort": 30170,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-unswitch-insns": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-unswitch-insns= (The maximum number of insns of an unswitched loop)",
      "explore_prefix": "--param max-unswitch-insns=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 100,
      "sort": 30250,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-max-unswitch-level": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param max-unswitch-level= (The maximum number of unswitchings in a single loop)",
      "explore_prefix": "--param max-unswitch-level=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 6,
      "sort": 30260,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-tracer-max-code-growth": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param tracer-max-code-growth= (Maximal code growth caused by tail duplication (in percent))",
      "explore_prefix": "--param tracer-max-code-growth=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 200,
      "sort": 30310,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-tracer-min-branch-probability": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param tracer-min-branch-probability= (Stop forward growth if the probability of best edge is less thanhis threshold (in percent). Used when profile feedback is not available)",
      "explore_prefix": "--param tracer-min-branch-probability=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 100,
      "sort": 30340,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-tracer-min-branch-probability-feedback": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param tracer-min-branch-probability-feedback= (Stop forward growth if the probability of best edge is less thanhis threshold (in percent). Used when profile feedback is available)",
      "explore_prefix": "--param tracer-min-branch-probability-feedback=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 160,
      "sort": 30330,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    },
    "##param-tracer-min-branch-ratio": {
      "can_omit": "yes",
      "default": "",
      "desc": "compiler flag: --param tracer-min-branch-ratio= (Stop reverse growth if the reverse probability of best edge is lesshan this threshold (in percent))",
      "explore_prefix": "--param tracer-min-branch-ratio=",
      "explore_start": 0,
      "explore_step": 1,
      "explore_stop": 20,
      "sort": 30320,
      "tags": [
        "basic",
        "parametric",
        "optimization"
      ],
      "type": "integer"
    }
  }
}
